{"version":3,"file":"static/js/actorDetailsPage.236689ad.chunk.js","mappings":"sTAiBaA,GAbYC,EAAAA,EAAAA,IAAH,wLAMXC,EAAAA,EAAAA,QAOkBD,EAAAA,EAAAA,IAAH,6WAMfC,EAAAA,EAAAA,OAWEA,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,UAMAC,GAAUF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,2C,mBC2CpB,EAhFkB,SAAC,GAAc,IAAD,MAAXI,EAAW,EAAXA,KACbC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,MAAZD,QAGNE,EAQEL,EARFK,UACAC,EAOEN,EAPFM,aACAC,EAMEP,EANFO,KACAC,EAKER,EALFQ,SACAC,EAIET,EAJFS,SACAC,EAGEV,EAHFU,OACAC,EAEEX,EAFFW,eACAC,EACEZ,EADFY,WAGF,OACE,2BACGX,EAASY,QACR,SAACC,EAAA,EAAD,CAAcC,KAAI,iBAAEd,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,iBAAE,EAAiBG,YAAnB,aAAE,EAAuBf,gBAAzB,QAAqC,OAEzD,UAACN,EAAD,YACE,0BACE,gBACEsB,IACmB,OAAjBX,EAAA,yCACsCA,GAClCY,EAENC,IAAKZ,OAGT,UAAC,KAAD,YACE,wBAAKA,KACL,uBAAIF,KACJ,UAAC,KAAD,YACE,0BACGG,IAAY,0CACZC,IAAY,qCACZC,IAAU,mCACVC,IAAkB,8CAClBC,IAAc,uCAEjB,0BACGJ,IAAY,6BAAKA,KACjBC,IAAY,uBAAIA,IACL,IAAXC,GAAe,mCAAgB,gCAC/BC,IAAkB,uBAAIA,IACtBC,IAAc,uBAAIA,EAAWQ,QAAQ,YAG1C,SAACtB,EAAD,CACEuB,GAAE,yBAAoBlB,GACtBU,MAAO,CACLG,KAAM,CACJf,SAAAA,IAJN,8BCtDGqB,EAAW1B,EAAAA,EAAAA,IAAH,uMAIVC,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,Q,UC2CX,EA3CyB,WACvB,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACJoB,GAAWC,EAAAA,EAAAA,MAEf,GAAuDC,EAAAA,EAAAA,UACrD,CAAC,eAAgB,CAAEtB,QAAAA,IACnBuB,EAAAA,GACA,CAAEC,UAAW,IAAOC,UAAW,MAHzB5B,EAAR,EAAQA,KAAM6B,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,QAASC,EAAzC,EAAyCA,UAczC,OARAC,EAAAA,EAAAA,YAAU,WACR,GAAa,MAATjC,EAAc,CAChB,IAAMkC,EAAcC,aAAaC,QAAQ,WACnCC,EAAcF,aAAaC,QAAQ,WACzCb,EAAS,WAAD,OAAYc,EAAZ,uBAAsCH,OAE/C,CAAClC,EAAMuB,IAENO,GACK,SAAC,IAAD,IAGLC,EACKO,EAAAA,GAAAA,MAAA,gDAAuBT,EAAMU,UAGlCP,GAAsB,MAAThC,GACfmC,aAAaK,QAAQ,UAAWC,KAAKC,WAAWvC,KAE9C,SAACwC,EAAA,MAAD,CACEC,QAAS,SACTC,QAAS,OACTC,KAAM,OACNC,SAAUC,EAAAA,GAJZ,UAME,SAAC1B,EAAD,WACE,SAAC,EAAD,CAAWtB,KAAMA,cAVzB","sources":["components/ActorInfo/ActorInfo.styled.jsx","components/ActorInfo/ActorInfo.jsx","pages/ActorDetailsPage/ActorDetailsPage.styled.jsx","pages/ActorDetailsPage/ActorDetailsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { StyledLink } from 'components/MovieInfo/MovieInfo.styled';\r\nimport { device } from 'deviceSizes';\r\n\r\nexport const Container = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n\r\n  @media ${device.tablet} {\r\n    width: 93vw;\r\n    display: flex;\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\nexport const InfoContainer = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n\r\n  @media ${device.tablet} {\r\n    width: 93vw;\r\n    display: flex;\r\n    margin-top: 0;\r\n  }\r\n\r\n  & img {\r\n    max-width: 365px;\r\n    margin: 0 auto;\r\n    max-height: auto;\r\n\r\n    @media ${device.tablet} {\r\n      width: 250px;\r\n    }\r\n\r\n    @media ${device.laptopL} {\r\n      width: 400px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NavLink = styled(StyledLink)`\r\n  margin: 0 auto;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport imageNotFound from '../../images/Error 404 Wallpaper.jpg';\r\nimport { InfoContainer, NavLink } from './ActorInfo.styled';\r\nimport GoBackButton from 'components/GoBackButton/GoBackButton';\r\nimport { MainInfo, InfoWrap } from 'components/MovieInfo/MovieInfo.styled';\r\n\r\nconst ActorInfo = ({ data }) => {\r\n  const location = useLocation();\r\n  const { actorId } = useParams();\r\n\r\n  const {\r\n    biography,\r\n    profile_path,\r\n    name,\r\n    birthday,\r\n    deathday,\r\n    gender,\r\n    place_of_birth,\r\n    popularity,\r\n  } = data;\r\n\r\n  return (\r\n    <div>\r\n      {location.state && (\r\n        <GoBackButton path={location?.state?.from?.location ?? '/'} />\r\n      )}\r\n      <InfoContainer>\r\n        <div>\r\n          <img\r\n            src={\r\n              profile_path !== null\r\n                ? `https://image.tmdb.org/t/p/w400${profile_path}`\r\n                : imageNotFound\r\n            }\r\n            alt={name}\r\n          ></img>\r\n        </div>\r\n        <InfoWrap>\r\n          <h1>{name}</h1>\r\n          <p>{biography}</p>\r\n          <MainInfo>\r\n            <li>\r\n              {birthday && <p>Birthday date:</p>}\r\n              {deathday && <p>Deathday:</p>}\r\n              {gender && <p>Gender:</p>}\r\n              {place_of_birth && <p>Place of birthday:</p>}\r\n              {popularity && <p>Rating:</p>}\r\n            </li>\r\n            <li>\r\n              {birthday && <p> {birthday}</p>}\r\n              {deathday && <p>{deathday}</p>}\r\n              {gender === 1 ? <p>Female</p> : <p>Male</p>}\r\n              {place_of_birth && <p>{place_of_birth}</p>}\r\n              {popularity && <p>{popularity.toFixed(1)}</p>}\r\n            </li>\r\n          </MainInfo>\r\n          <NavLink\r\n            to={`/moviesbyactor/${actorId}`}\r\n            state={{\r\n              from: {\r\n                location,\r\n              },\r\n            }}\r\n          >\r\n            Movies\r\n          </NavLink>\r\n        </InfoWrap>\r\n      </InfoContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nActorInfo.propTypes = {\r\n  data: PropTypes.shape({\r\n    biography: PropTypes.string,\r\n    profile_path: PropTypes.string,\r\n    name: PropTypes.string,\r\n    birthday: PropTypes.string,\r\n    deathday: PropTypes.string,\r\n    gender: PropTypes.number,\r\n    place_of_birth: PropTypes.string,\r\n    popularity: PropTypes.number,\r\n    id: PropTypes.number.isRequired,\r\n  }),\r\n};\r\n\r\nexport default ActorInfo;\r\n","import styled from '@emotion/styled';\r\nimport { device } from 'deviceSizes';\r\n\r\nexport const PageWrap = styled.div`\r\n  width: calc(90vw- 20px);\r\n  padding: 0 10px;\r\n\r\n  @media ${device.tablet} {\r\n    width: calc(93vw- 20px);\r\n  }\r\n\r\n  @media ${device.laptop} {\r\n    width: calc(98vw- 40px);\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import { useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useQuery } from 'react-query';\r\nimport { toast } from 'react-toastify';\r\nimport { motion } from 'framer-motion';\r\nimport ThreeDots from 'components/Loaders/Loader';\r\nimport { actorDetails } from 'services/moviesIDBService';\r\nimport ActorInfo from 'components/ActorInfo';\r\nimport { PageWrap } from './ActorDetailsPage.styled';\r\nimport { pageVariants } from 'animations';\r\n\r\nconst ActorDetailsPage = () => {\r\n  const { actorId } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  const { data, error, isLoading, isError, isSuccess } = useQuery(\r\n    ['movieDetails', { actorId }],\r\n    actorDetails,\r\n    { staleTime: 60000, cacheTime: 60000 }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data === 404) {\r\n      const prevActorId = localStorage.getItem('actorId');\r\n      const prevMovieId = localStorage.getItem('movieId');\r\n      navigate(`/movies/${prevMovieId}/cast/actor/${prevActorId}`);\r\n    }\r\n  }, [data, navigate]);\r\n\r\n  if (isLoading) {\r\n    return <ThreeDots />;\r\n  }\r\n\r\n  if (isError) {\r\n    return toast.error(`Ошибка: ${error.message}`);\r\n  }\r\n\r\n  if (isSuccess && data !== 404) {\r\n    localStorage.setItem('actorId', JSON.stringify(+actorId));\r\n    return (\r\n      <motion.div\r\n        initial={'closed'}\r\n        animate={'open'}\r\n        exit={'exit'}\r\n        variants={pageVariants}\r\n      >\r\n        <PageWrap>\r\n          <ActorInfo data={data} />\r\n        </PageWrap>\r\n      </motion.div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ActorDetailsPage;\r\n"],"names":["InfoContainer","styled","device","NavLink","StyledLink","data","location","useLocation","actorId","useParams","biography","profile_path","name","birthday","deathday","gender","place_of_birth","popularity","state","GoBackButton","path","from","src","imageNotFound","alt","toFixed","to","PageWrap","navigate","useNavigate","useQuery","actorDetails","staleTime","cacheTime","error","isLoading","isError","isSuccess","useEffect","prevActorId","localStorage","getItem","prevMovieId","toast","message","setItem","JSON","stringify","motion","initial","animate","exit","variants","pageVariants"],"sourceRoot":""}