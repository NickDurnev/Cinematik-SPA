{"version":3,"file":"static/js/cast.efe5cbec.chunk.js","mappings":"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","sources":["components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/moviesApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CardWrap = styled.div`\n  width: calc((100vw - 20px) / 8);\n  margin: 10px;\n  background-color: ${props => props.theme.bgCastCard};\n  border-radius: 5px;\n  & > img {\n    width: 100%;\n    height: auto;\n  }\n  & > div {\n    min-height: 100px;\n    padding: 5px;\n    color: ${props => props.theme.textColor};\n  }\n`;\n\nexport const RoleName = styled.p`\n  padding-top: 10px;\n  font-style: italic;\n  margin-bottom: 5px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport imageNotFound from '../../images/Error 404 Wallpaper.jpg';\nimport { CardWrap, RoleName, ActorName } from './CastCard.styled';\n\nconst CastCard = ({ data }) => {\n  const { character, name, profile_path } = data;\n  return (\n    <CardWrap>\n      <img\n        src={\n          profile_path !== null\n            ? `https://image.tmdb.org/t/p/w300${profile_path}`\n            : imageNotFound\n        }\n        alt={name}\n      ></img>\n      <div>\n        <RoleName>{character}</RoleName>\n        <ActorName>{name}</ActorName>\n      </div>\n    </CardWrap>\n  );\n};\n\nCastCard.propTypes = {\n  data: PropTypes.shape({\n    character: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n  }),\n};\n\nexport default CastCard;\n","import styled from '@emotion/styled';\n\nconst CastList = styled.ul`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport default CastList;\n","import { useQuery } from 'react-query';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport ThreeDots from 'components/Loaders/Loader';\nimport { movieCast } from 'services/moviesApi';\nimport CastCard from 'components/CastCard';\nimport CastList from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const { pathname } = location;\n\n  const { data, error, isLoading, isError, isSuccess } = useQuery(\n    ['movieCast', { movieId }],\n    movieCast,\n    { staleTime: 60000, cacheTime: 60000 }\n  );\n\n  if (isLoading) {\n    return <ThreeDots />;\n  }\n\n  if (isError) {\n    return toast.error(`Ошибка: ${error.message}`);\n  }\n\n  if (isSuccess) {\n    console.log(data.cast);\n    if (data.cast.length === 0) {\n      return <h2>We don't have info about cast for this movie</h2>;\n    }\n    return (\n      <CastList>\n        {data.cast.map(actor => {\n          const { id, cast_id } = actor;\n          return (\n            <li key={cast_id}>\n              <Link\n                to={`${pathname}/actor/${id}`}\n                state={{\n                  from: {\n                    location,\n                    label: 'Go back to movie',\n                  },\n                }}\n              >\n                <CastCard data={actor} />\n              </Link>\n            </li>\n          );\n        })}\n      </CastList>\n    );\n  }\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst key = `105ba628fde77462ee84526f3393a31c`;\n\nexport async function fetchTrendmovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${key}`);\n  return response.data.results;\n}\n\nexport async function fetchMoviesGenres() {\n  const response = await axios.get(\n    `genre/movie/list?api_key=${key}&language=en-US`\n  );\n  return response.data.genres;\n}\n\nexport async function fetchMoviesByGenre({ pageParam = 1, queryKey }) {\n  const [_key, { genreId }] = queryKey;\n  console.log(_key);\n  const response = await axios.get(\n    `discover/movie?api_key=${key}&with_genres=${genreId}&page=${pageParam}`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function fetchSimilarMovies() {\n  const pageNumber = Math.floor(Math.random() * (500 - 1 + 1)) + 1;\n  const response = await axios.get(\n    `movie/725201/similar?api_key=${key}&language=en-US&page=${pageNumber}`\n  );\n  const results = response.data.results;\n  return { results };\n}\n\nexport async function fetchTopRatedMovies({ pageParam = 1 }) {\n  const response = await axios.get(\n    `movie/top_rated?api_key=${key}&language=en-US&page=${pageParam}`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function fetchUpcomingMovies({ pageParam = 1 }) {\n  const response = await axios.get(\n    `movie/upcoming?api_key=${key}&language=en-US&page=${pageParam}`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function searchMovie({ pageParam = 1, queryKey }) {\n  const [_key, { query }] = queryKey;\n  console.log(`${_key}`);\n  if (!query) {\n    return;\n  }\n  const response = await axios.get(\n    `search/movie?api_key=${key}&language=en-US&query=${query}&page=${pageParam}&include_adult=false`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  if (!results.length) {\n    toast.info('Movies were not found');\n  }\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function movieDetails({ queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${key}&language=en-US`\n    );\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    return error.response.status;\n  }\n}\n\nexport async function similarMovies({ pageParam = 1, queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/similar?api_key=${key}&language=en-US&page=${pageParam}`\n    );\n    const results = response.data.results;\n    const totalPages = response.data.total_pages;\n    return { results, nextPage: pageParam + 1, totalPages: totalPages };\n  } catch (error) {\n    return error.response.status;\n  }\n}\n\nexport async function actorDetails({ queryKey }) {\n  const [_key, { actorId }] = queryKey;\n  console.log(`${_key}`);\n  try {\n    const response = await axios.get(\n      `person/${actorId}?api_key=${key}&language=en-US`\n    );\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    return error.response.status;\n  }\n}\n\nexport async function filmsByActor({ queryKey }) {\n  const [_key, { actorId }] = queryKey;\n  console.log(`${_key}`);\n  try {\n    const response = await axios.get(\n      `person/${actorId}/movie_credits?api_key=${key}&language=en-US`\n    );\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    return error.response.status;\n  }\n}\n\nexport async function movieCast({ queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${key}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews({ pageParam = 1, queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${key}&language=en-US&page=1`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function fetchMovieTrailers(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/videos?api_key=${key}&language=en-US`\n  );\n  return response.data.results;\n}\n"],"names":["CardWrap","styled","props","theme","bgCastCard","textColor","RoleName","ActorName","data","character","name","profile_path","src","imageNotFound","alt","movieId","useParams","location","useLocation","pathname","useQuery","movieCast","staleTime","cacheTime","error","isLoading","isError","isSuccess","toast","message","console","log","cast","length","map","actor","id","cast_id","to","state","from","label","axios","key","fetchTrendmovies","response","results","fetchMoviesGenres","genres","fetchMoviesByGenre","pageParam","queryKey","_key","genreId","totalPages","total_pages","nextPage","fetchSimilarMovies","pageNumber","Math","floor","random","fetchTopRatedMovies","fetchUpcomingMovies","searchMovie","query","movieDetails","status","actorDetails","actorId","filmsByActor","movieReviews","fetchMovieTrailers"],"sourceRoot":""}