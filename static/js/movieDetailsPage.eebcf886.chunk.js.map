{"version":3,"file":"static/js/movieDetailsPage.eebcf886.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx","components/Button/Button.styled.jsx","components/MovieInfo/MovieInfo.styled.jsx","services/api.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  InfoWrap,\n  Container,\n  MainInfo,\n  MovieGenresList,\n  AddInfo,\n  StyledLink,\n  ButtonWrap,\n  Button,\n} from './MovieInfo.styled';\n\nconst Movieinfo = ({ movieData, handleModalToggle }) => {\n  const { movieId } = useParams();\n  const {\n    poster_path,\n    release_date,\n    title,\n    tagline,\n    runtime,\n    overview,\n    budget,\n    genres,\n  } = movieData;\n  return (\n    <Container>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n        alt={title}\n      ></img>\n      <InfoWrap>\n        <h1>{title}</h1>\n        {tagline !== '' && <h2>\"{tagline}\"</h2>}\n        <p>{overview}</p>\n        <MainInfo>\n          <li>\n            <p>Release date:</p>\n            <p>Runtime:</p>\n            {budget !== 0 && <p>Budget:</p>}\n          </li>\n          <li>\n            <p> {release_date}</p>\n            <p>{runtime} minutes </p>\n            {budget !== 0 && <p>{budget} $</p>}\n          </li>\n        </MainInfo>\n        <MovieGenresList>\n          {genres.map(({ id, name }) => (\n            <li key={id}>\n              <p>{name}</p>\n            </li>\n          ))}\n        </MovieGenresList>\n        <Button type=\"button\" padding=\"10px\" onClick={handleModalToggle}>\n          Watch Trailer\n        </Button>\n        <AddInfo>\n          <p>Additional imformation</p>\n          <ButtonWrap>\n            <StyledLink to={`/movies/${movieId}/cast`}>Cast</StyledLink>\n            <StyledLink to={`/movies/${movieId}/reviews`}>Reviews</StyledLink>\n          </ButtonWrap>\n        </AddInfo>\n      </InfoWrap>\n    </Container>\n  );\n};\n\nMovieinfo.propTypes = {\n  movieData: PropTypes.shape({\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tagline: PropTypes.string.isRequired,\n    runtime: PropTypes.number.isRequired,\n    budget: PropTypes.number,\n    genres: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default Movieinfo;\n","import styled from 'styled-components';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: ${props => props.theme.backdropColor};\n  color: ${props => props.theme.textColor};\n  overflow-y: scroll;\n`;\n\nexport const Modal = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  min-width: 300px;\n  padding: 10px;\n  border-radius: 5px;\n  text-align: center;\n  background-color: ${props => props.theme.bgColor};\n  font-weight: ${props => props.theme.mainTextFontWeight};\n\n  & > p {\n    margin-bottom: 10px;\n  }\n\n  & button + button {\n    margin-left: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { Modal, Backdrop } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst TrailerModal = ({ children, onModal }) => {\n  const onClickClose = e => {\n    if (e.target.nodeName === 'DIV') {\n      onModal(false);\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={onClickClose}>\n      <Modal>{children}</Modal>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nTrailerModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onModal: PropTypes.func.isRequired,\n};\n\nexport default TrailerModal;\n","import { useState, useRef } from 'react';\nimport { useParams, Route, Routes } from 'react-router-dom';\nimport { useQuery } from 'react-query';\nimport { lazy, Suspense } from 'react';\nimport { toast } from 'react-toastify';\nimport ThreeDots from 'components/Loaders/Loader';\nimport { movieDetails } from 'services/api';\nimport MovieInfo from 'components/MovieInfo';\nimport TrailerModal from 'components/Modal/Modal';\nimport { fetchMovieTrailers } from '../../services/api';\n\nconst Cast = lazy(() =>\n  import('components/Cast' /* webpackChunkName: \"cast\" */)\n);\nconst Reviews = lazy(() =>\n  import('components/Reviews' /* webpackChunkName: \"reviews\" */)\n);\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const youtubeURL = useRef('https://www.youtube.com/embed/');\n  const [isModalOpen, setisModalOpen] = useState(false);\n  const [movieTrailer, setMovieTrailer] = useState(null);\n\n  const handleModalToggle = async bool => {\n    if (!bool) {\n      setisModalOpen(false);\n      return;\n    }\n    setisModalOpen(true);\n    if (!movieTrailer) {\n      const trailer = await addMovieTrailer();\n      sessionStorage.setItem('trailer', JSON.stringify(trailer));\n      setMovieTrailer(trailer);\n    }\n  };\n\n  const addMovieTrailer = async () => {\n    const trailers = await fetchMovieTrailers(movieId);\n    const officicalTrailer = trailers.find(({ name }) =>\n      name.includes('Official')\n    );\n    return officicalTrailer;\n  };\n\n  const { data, error, isLoading, isError, isSuccess } = useQuery(\n    ['movieDetails', { movieId }],\n    movieDetails,\n    { staleTime: 60000, cacheTime: 60000 }\n  );\n\n  if (isLoading) {\n    return <ThreeDots />;\n  }\n\n  if (isError) {\n    return toast.error(`Ошибка: ${error.message}`);\n  }\n\n  if (isSuccess) {\n    return (\n      <>\n        <MovieInfo\n          movieData={data}\n          handleModalToggle={bool => handleModalToggle(bool)}\n        />\n        <Suspense fallback={<ThreeDots />}>\n          <Routes>\n            <Route path=\"/cast\" element={<Cast />}></Route>\n            <Route path=\"/reviews\" element={<Reviews />}></Route>\n          </Routes>\n        </Suspense>\n        {isModalOpen && movieTrailer && (\n          <TrailerModal onModal={bool => handleModalToggle(bool)}>\n            <iframe\n              src={`${youtubeURL.current}${movieTrailer.key}?autoplay=0&mute=0&controls=1`}\n              title=\"video\"\n              width=\"600\"\n              height=\"400\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            ></iframe>\n          </TrailerModal>\n        )}\n      </>\n    );\n  }\n};\n\nexport default MovieDetailsPage;\n","import styled from 'styled-components';\n\nconst Wrap = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 10px 0;\n  font-size: 20px;\n  font-weight: 600;\n  text-transform: uppercase;\n  width: 150px;\n  height: 70px;\n  padding: ${props => props.padding};\n  color: ${props => props.theme.elementColor};\n  background-color: ${props => props.theme.bgElementColor};\n  transition: all ${props => props.theme.hoverTransition}\n    ${props => props.theme.hoverTimeFunction};\n\n  &:hover,\n  &:focus {\n    background-color: ${props => props.theme.bgElementHoverColor};\n  }\n`;\n\nexport default Wrap;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Wrap from 'components/Button/Button.styled';\n\nexport const Container = styled.div`\n  display: flex;\n  padding-top: 20px;\n  margin-bottom: 20px;\n\n  & img {\n    width: 400px;\n    height: auto;\n  }\n`;\n\nexport const InfoWrap = styled.div`\n  flex-grow: 1;\n  padding: 40px;\n  & > h1,\n  h2 {\n    margin-bottom: 20px;\n  }\n\n  & h2 {\n    font-size: 20px;\n    font-weight: 500;\n    font-style: italic;\n    color: #817d7d;\n  }\n\n  & > p {\n    line-height: 1.5;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const MainInfo = styled.ul`\n  display: flex;\n  max-width: 30vw;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  & > li:first-child {\n    font-weight: 600;\n    text-align: left;\n    margin-right: 20px;\n  }\n\n  & > li:last-child {\n    text-align: right;\n  }\n\n  & > li > p + p {\n    margin-top: 10px;\n  }\n`;\n\nexport const MovieGenresList = styled.ul`\n  width: 60%;\n  margin-right: auto;\n  margin-left: auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n  margin-top: 10px;\n\n  & > li {\n    padding: 15px 50px;\n    font-family: sans-serif;\n    text-transform: uppercase;\n    text-align: center;\n    position: relative;\n    text-decoration: none;\n    display: inline-block;\n    background-image: linear-gradient(\n      to right,\n      ${props => props.theme.bgElementColor},\n      ${props => props.theme.bgElementColor} 50%,\n      #000 50%\n    );\n    background-size: 200% 100%;\n    background-position: -100%;\n    position: relative;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: ${props => props.theme.bgElementColor};\n    transition: all ${props => props.theme.hoverTransition}\n      ${props => props.theme.hoverTimeFunction};\n    &:before {\n      content: '';\n      background: ${props => props.theme.bgElementColor};\n      display: block;\n      position: absolute;\n      bottom: -3px;\n      left: 0;\n      width: 0;\n      height: 3px;\n      transition: all 0.3s ease-in-out;\n    }\n    &:hover {\n      background-position: 0;\n    }\n    &:hover::before {\n      width: 100%;\n    }\n  }\n`;\n\nexport const AddInfo = styled.div`\n  margin-top: 30px;\n  & > p {\n    margin-bottom: 20px;\n    font-size: 20px;\n    font-weight: 500;\n  }\n`;\n\nexport const ButtonWrap = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const StyledLink = styled(Link)`\n  margin: 0 auto;\n  width: 150px;\n  height: 40px;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  font-weight: 600;\n  text-transform: uppercase;\n  color: ${props => props.theme.elementColor};\n  border-radius: 5px;\n  background-color: ${props => props.theme.bgElementColor};\n  transition: all ${props => props.theme.hoverTransition}\n    ${props => props.theme.hoverTimeFunction};\n\n  &:hover,\n  &:focus {\n    background-color: ${props => props.theme.bgElementHoverColor};\n  }\n`;\n\nexport const Button = styled(Wrap)`\n  margin: 0 auto;\n  margin-top: 30px;\n`;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst key = `105ba628fde77462ee84526f3393a31c`;\n\nexport async function fetchTrendmovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${key}`);\n  return response.data.results;\n}\n\nexport async function searchMovie({ pageParam = 1, queryKey }) {\n  const [_key, { query }] = queryKey;\n  console.log(`${_key}`);\n  if (query !== '') {\n    const response = await axios.get(\n      `search/movie?api_key=${key}&language=en-US&query=${query}&page=${pageParam}&include_adult=false`\n    );\n    const results = response.data.results;\n    const totalPages = response.data.total_pages;\n    if (!results.length) {\n      toast.info('Movies were not found');\n      return null;\n    }\n    return { results, nextPage: pageParam + 1, totalPages: totalPages };\n  }\n}\n\nexport async function movieDetails({ queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${key}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function actorDetails({ queryKey }) {\n  const [_key, { actorId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `person/${actorId}?api_key=${key}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function filmsByActor({ queryKey }) {\n  const [_key, { actorId }] = queryKey;\n  console.log(actorId);\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `person/${actorId}/movie_credits?api_key=${key}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCast({ queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${key}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews({ pageParam = 1, queryKey }) {\n  const [_key, { movieId }] = queryKey;\n  console.log(`${_key}`);\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${key}&language=en-US&page=1`\n  );\n  const results = response.data.results;\n  const totalPages = response.data.total_pages;\n  return { results, nextPage: pageParam + 1, totalPages: totalPages };\n}\n\nexport async function fetchMovieTrailers(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/videos?api_key=${key}&language=en-US`\n  );\n  return response.data.results;\n}\n"],"names":["movieData","handleModalToggle","movieId","useParams","poster_path","release_date","title","tagline","runtime","overview","budget","genres","src","alt","map","id","name","type","padding","onClick","to","Backdrop","styled","props","theme","backdropColor","textColor","Modal","bgColor","mainTextFontWeight","modalRoot","document","querySelector","children","onModal","createPortal","e","target","nodeName","Cast","lazy","Reviews","youtubeURL","useRef","useState","isModalOpen","setisModalOpen","movieTrailer","setMovieTrailer","bool","addMovieTrailer","trailer","sessionStorage","setItem","JSON","stringify","fetchMovieTrailers","trailers","officicalTrailer","find","includes","useQuery","movieDetails","staleTime","cacheTime","data","error","isLoading","isError","isSuccess","toast","message","MovieInfo","Suspense","fallback","path","element","current","key","width","height","allow","allowFullScreen","elementColor","bgElementColor","hoverTransition","hoverTimeFunction","bgElementHoverColor","Container","InfoWrap","MainInfo","MovieGenresList","AddInfo","ButtonWrap","StyledLink","Link","Button","Wrap","axios","fetchTrendmovies","response","results","searchMovie","pageParam","queryKey","_key","query","console","log","totalPages","total_pages","length","nextPage","actorDetails","actorId","filmsByActor","movieCast","movieReviews"],"sourceRoot":""}