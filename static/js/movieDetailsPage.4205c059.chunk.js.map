{"version":3,"file":"static/js/movieDetailsPage.4205c059.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","pages/MovieDetailsPage/MovieDetailsPage.styled.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/favoritesMoviesStorageActions.js","services/watchedMoviesStorageActions.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { addToFavoritesMovies } from 'services/favoritesMoviesStorageActions';\nimport { addToWatchedMovies } from 'services/watchedMoviesStorageActions';\nimport GoBackButton from '../GoBackButton/GoBackButton';\nimport {\n  InfoWrap,\n  Container,\n  MainInfo,\n  MovieGenresList,\n  AddInfo,\n  StyledLink,\n  LinkWrap,\n  Button,\n  IconButton,\n} from './MovieInfo.styled';\nimport { ReactComponent as TelIcon } from '../../images/icons/Telev.svg';\nimport { ReactComponent as StarIcon } from '../../images/icons/Star.svg';\nimport imageNotFound from '../../images/Error 404 Wallpaper.jpg';\n\nconst Movieinfo = ({ movieData, handleModalToggle }) => {\n  const [prevLocationState, setPrevLocationState] = useState(null);\n  const [addedToFavorites, setAddedToFavorites] = useState(null);\n  const location = useLocation();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setPrevLocationState(location.state);\n    checkMovieID();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.state]);\n\n  function checkMovieID() {\n    const savedMovies = localStorage.getItem('favoritesMovies');\n    let parsedMovies = JSON.parse(savedMovies);\n    if (!parsedMovies) {\n      return;\n    }\n    const filter = parsedMovies.find(({ id }) => id === movieData.id);\n    if (filter) {\n      setAddedToFavorites(movieData.id);\n    }\n  }\n\n  function handleAddMovie(data) {\n    addToFavoritesMovies(data);\n    checkMovieID();\n  }\n\n  console.log(movieData);\n\n  const {\n    poster_path,\n    release_date,\n    title,\n    tagline,\n    runtime,\n    overview,\n    budget,\n    genres,\n  } = movieData;\n  return (\n    <div>\n      <GoBackButton\n        path={\n          prevLocationState?.from?.location ??\n          prevLocationState?.from?.prevLocation ??\n          '/'\n        }\n        state={{\n          from: {\n            location,\n          },\n        }}\n      />\n      <Container>\n        <div>\n          <img\n            src={\n              poster_path !== null\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : imageNotFound\n            }\n            alt={title}\n          />\n          {addedToFavorites ? (\n            <IconButton onClick={() => addToWatchedMovies(movieData)}>\n              Add to watched\n              <TelIcon />\n            </IconButton>\n          ) : (\n            <IconButton onClick={() => handleAddMovie(movieData)}>\n              Add to favorites\n              <StarIcon />\n            </IconButton>\n          )}\n        </div>\n        <InfoWrap>\n          <h1>{title}</h1>\n          {tagline !== '' && <h2>\"{tagline}\"</h2>}\n          <p>{overview}</p>\n          <MainInfo>\n            <li>\n              <p>Release date:</p>\n              <p>Runtime:</p>\n              {budget !== 0 && <p>Budget:</p>}\n            </li>\n            <li>\n              <p> {release_date}</p>\n              <p>{runtime} minutes </p>\n              {budget !== 0 && <p>{budget} $</p>}\n            </li>\n          </MainInfo>\n          <MovieGenresList>\n            {genres.map(({ id, name }) => (\n              <li key={id}>\n                <Link\n                  to={`/movies/by_genre=${id}`}\n                  state={{\n                    from: {\n                      location,\n                    },\n                  }}\n                >\n                  {name}\n                </Link>\n              </li>\n            ))}\n          </MovieGenresList>\n          <Button type=\"button\" padding=\"10px\" onClick={handleModalToggle}>\n            Watch Trailer\n          </Button>\n          <AddInfo>\n            <LinkWrap>\n              <StyledLink\n                to={`/movies/${movieId}/cast`}\n                state={{\n                  ...prevLocationState,\n                }}\n              >\n                Cast\n              </StyledLink>\n              <StyledLink\n                to={`/movies/${movieId}/reviews`}\n                state={{\n                  ...prevLocationState,\n                }}\n              >\n                Reviews\n              </StyledLink>\n              <StyledLink\n                to={`/movies/${movieId}/similar_movies`}\n                state={{\n                  ...prevLocationState,\n                }}\n              >\n                Similar Movies\n              </StyledLink>\n            </LinkWrap>\n          </AddInfo>\n        </InfoWrap>\n      </Container>\n    </div>\n  );\n};\n\nMovieinfo.propTypes = {\n  movieData: PropTypes.shape({\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tagline: PropTypes.string.isRequired,\n    runtime: PropTypes.number.isRequired,\n    budget: PropTypes.number,\n    genres: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default Movieinfo;\n","import styled from '@emotion/styled';\nimport { device } from 'deviceSizes';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: ${props => props.theme.backdropColor};\n  color: ${props => props.theme.textColor};\n  overflow-y: scroll;\n`;\n\nexport const StyledModal = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  /* min-width: 300px;\n  height: 400px; */\n  border-radius: 5px;\n  text-align: center;\n  background-color: ${props => props.theme.modalBgColor};\n  font-weight: ${props => props.theme.mainTextFontWeight};\n\n  @media ${device.mobileM} {\n    height: 200px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { StyledModal, Backdrop } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children, onModal }) => {\n  const onClickClose = e => {\n    if (e.target.nodeName === 'DIV') {\n      onModal(false);\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={onClickClose}>\n      <StyledModal>{children}</StyledModal>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\nimport { device } from 'deviceSizes';\n\nexport const Frame = styled.iframe`\n  width: 300px;\n  height: 200px;\n  border: none;\n  border-radius: 5px;\n  background-color: inherit;\n\n  @media ${device.tablet} {\n    width: 600px;\n    height: 400px;\n  }\n`;\n","import { useState, useRef, useEffect } from 'react';\nimport { useParams, Outlet, useNavigate } from 'react-router-dom';\nimport { useQuery } from 'react-query';\nimport { toast } from 'react-toastify';\nimport ThreeDots from 'components/Loaders/Loader';\nimport { movieDetails } from 'services/moviesApi';\nimport MovieInfo from 'components/MovieInfo';\nimport Modal from 'components/Modal/Modal';\nimport { fetchMovieTrailers } from '../../services/moviesApi';\nimport { Frame } from './MovieDetailsPage.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  let navigate = useNavigate();\n  const youtubeURL = useRef('https://www.youtube.com/embed/');\n  const [isModalOpen, setisModalOpen] = useState(false);\n  const [movieTrailer, setMovieTrailer] = useState(null);\n\n  const handleModalToggle = async bool => {\n    if (!bool) {\n      setisModalOpen(false);\n      return;\n    }\n    setisModalOpen(true);\n    if (!movieTrailer) {\n      const trailer = await addMovieTrailer();\n      sessionStorage.setItem('trailer', JSON.stringify(trailer));\n      setMovieTrailer(trailer);\n    }\n  };\n\n  const addMovieTrailer = async () => {\n    const trailers = await fetchMovieTrailers(movieId);\n    const officicalTrailer = trailers.find(({ name }) =>\n      name.includes('Official')\n    );\n    return officicalTrailer;\n  };\n\n  const { data, error, isLoading, isError, isSuccess } = useQuery(\n    ['movieDetails', { movieId }],\n    movieDetails,\n    { staleTime: 60000, cacheTime: 60000 }\n  );\n\n  useEffect(() => {\n    if (data === 404) {\n      const prevMovieId = localStorage.getItem('movieId');\n      navigate(`/movies/${prevMovieId}`);\n    }\n  }, [data, navigate]);\n\n  if (isLoading) {\n    return <ThreeDots />;\n  }\n\n  if (isError) {\n    return toast.error(`Ошибка: ${error.message}`);\n  }\n\n  if (isSuccess && data !== 404) {\n    localStorage.setItem('movieId', JSON.stringify(+movieId));\n    return (\n      <>\n        <MovieInfo\n          movieData={data}\n          handleModalToggle={bool => handleModalToggle(bool)}\n        />\n        {isModalOpen && (\n          <Modal onModal={bool => handleModalToggle(bool)}>\n            {movieTrailer ? (\n              <Frame\n                src={`${youtubeURL.current}${movieTrailer.key}?autoplay=0&mute=0&controls=1`}\n                title=\"video\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              ></Frame>\n            ) : (\n              <h2>We don't have trailer for this movie</h2>\n            )}\n          </Modal>\n        )}\n        <Outlet />\n      </>\n    );\n  }\n};\n\nexport default MovieDetailsPage;\n","export function addToFavoritesMovies(data) {\n  const savedMovies = localStorage.getItem('favoritesMovies');\n  let parsedMovies = JSON.parse(savedMovies);\n  if (!parsedMovies) {\n    parsedMovies = [data];\n    window.localStorage.setItem(\n      'favoritesMovies',\n      JSON.stringify(parsedMovies)\n    );\n    return;\n  }\n  const filter = parsedMovies.find(({ id }) => id === data.id);\n  if (filter) {\n    return;\n  }\n  parsedMovies = [...parsedMovies, data];\n  window.localStorage.setItem('favoritesMovies', JSON.stringify(parsedMovies));\n}\n\nexport function deleteFromFavoritesMovies(movies, selectedID) {\n  const filteredMovies = movies.filter(({ id }) => id !== selectedID);\n  window.localStorage.setItem(\n    'favoritesMovies',\n    JSON.stringify(filteredMovies)\n  );\n  return filteredMovies;\n}\n","export function addToWatchedMovies(data) {\n  const savedMovies = localStorage.getItem('watchedMovies');\n  let parsedMovies = JSON.parse(savedMovies);\n  if (!parsedMovies) {\n    parsedMovies = [data];\n    window.localStorage.setItem('watchedMovies', JSON.stringify(parsedMovies));\n    return;\n  }\n  const filter = parsedMovies.find(({ id }) => id === data.id);\n  if (filter) {\n    return;\n  }\n  parsedMovies = [...parsedMovies, data];\n  window.localStorage.setItem('watchedMovies', JSON.stringify(parsedMovies));\n}\n\nexport function deleteFromWatchedMovies(movies, selectedID) {\n  const filteredMovies = movies.filter(({ id }) => id !== selectedID);\n  window.localStorage.setItem('watchedMovies', JSON.stringify(filteredMovies));\n  return filteredMovies;\n}\n"],"names":["movieData","handleModalToggle","useState","prevLocationState","setPrevLocationState","addedToFavorites","setAddedToFavorites","location","useLocation","movieId","useParams","checkMovieID","savedMovies","localStorage","getItem","parsedMovies","JSON","parse","find","id","useEffect","state","console","log","poster_path","release_date","title","tagline","runtime","overview","budget","genres","GoBackButton","path","from","prevLocation","src","imageNotFound","alt","onClick","addToWatchedMovies","data","addToFavoritesMovies","Star","map","name","to","type","padding","Backdrop","styled","props","theme","backdropColor","textColor","StyledModal","modalBgColor","mainTextFontWeight","device","modalRoot","document","querySelector","children","onModal","createPortal","e","target","nodeName","Frame","navigate","useNavigate","youtubeURL","useRef","isModalOpen","setisModalOpen","movieTrailer","setMovieTrailer","bool","addMovieTrailer","trailer","sessionStorage","setItem","stringify","fetchMovieTrailers","trailers","officicalTrailer","includes","useQuery","movieDetails","staleTime","cacheTime","error","isLoading","isError","isSuccess","prevMovieId","toast","message","MovieInfo","current","key","allow","allowFullScreen","window","deleteFromFavoritesMovies","movies","selectedID","filteredMovies","filter","deleteFromWatchedMovies"],"sourceRoot":""}